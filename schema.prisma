generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(cuid())
  name             String
  email            String            @unique
  emailVerified    DateTime?
  image            String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  age              Int               @default(0)
  city             String            @default("")
  country          String            @default("")
  handicap         Float             @default(0)
  photoGallery     String[]          @default([])
  preferenceSetId  String?           @unique
  profilePhoto     String?
  province         String            @default("")
  gender           Int               @default(0)
  accounts         Account[]
  Authenticator    Authenticator[]
  onboardingStatus OnboardingStatus?
  sessions         Session[]
  preferenceSet    PreferenceSet?    @relation(fields: [preferenceSetId], references: [preferenceSetId])
}

model PreferenceSet {
  preferenceSetId         String   @id @default(cuid())
  distanceRange           Float
  preferredCourses        String[]
  similarAge              Boolean
  sameGender              Boolean
  playWithSimilarHandicap Boolean
  teeBoxes                Int
  cart                    Int
  timeOfDay               Int[]
  weatherPreference       Int[]
  paceOfPlay              Int[]
  conversationLevel       Int[]
  drinking                Boolean
  okayWithPartnerDrinking Boolean
  smoking                 Boolean
  okayWithPartnerSmoking  Boolean
  music                   Boolean
  musicPreference         Int[]
  wager                   Boolean
  wagerPreference         String
  User                    User?
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model OnboardingStatus {
  id        String   @id @default(uuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}
